#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>


#define MaxPixels   10000000 
#define byte        unsigned char
#define True        1
#define False       0


int balls = 0;


typedef struct _pixel_struct
{
    byte blue;
    byte green;
    byte red;
} pixel_struct;


int width, height;
long pixel_count;
pixel_struct *pPixels;
pixel_struct Pixels[MaxPixels]; 


void StoreNewPixel(int blue, int green, int red, byte ResetWidth)
{
    if (ResetWidth == True) 
        width = 1;
    else 
        width++;
    pixel_count++;
    pPixels->blue = blue;
    pPixels->green = green;
    pPixels->red = red;
    pPixels++;
}


void get_input_data(void)
{
    int sol, c; 
    int blue, green, red;

    sol = 1;
    width = 0;
    height = 0;
    pixel_count = 0;
    pPixels = Pixels;

    while ((sol > 0) && (pixel_count < MaxPixels))
    {
        sol = scanf("%d,%d,%d", &blue, &green, &red);
        if (sol > 0)
        {
            StoreNewPixel(blue, green, red, True);
            c = getchar();
            while (c == ' ')
            {
                scanf("%d,%d,%d", &blue, &green, &red);
                StoreNewPixel(blue, green, red, False);
                c = getchar();
            }
            height++;
        }
    }
    //printf("width = %d, height = %d, PixelCount = %ld\n", width, height, pixel_count);
}


void process_data(void)
{                   
    int width_step;
    int height_step;
    long pixel_sum;

    width_step = width >> 3;
    height_step = height >> 3;
    pixel_sum = 0;

    // Sum up 21 pixel points. Max value is 21 * 3 * 255 = 16065

    // 3,1
    pPixels = &Pixels[(3*width_step)+(((height_step*1)-1)*width)];
    pixel_sum += pPixels->blue + pPixels->green + pPixels->red;

    // 5,1
    pPixels = &Pixels[(5*width_step)+(((height_step*1)-1)*width)];
    pixel_sum += pPixels->blue + pPixels->green + pPixels->red;

    // 2,2
    pPixels = &Pixels[(2*width_step)+(((height_step*2)-1)*width)];
    pixel_sum += pPixels->blue + pPixels->green + pPixels->red;

    // 4,2
    pPixels = &Pixels[(4*width_step)+(((height_step*2)-1)*width)];
    pixel_sum += pPixels->blue + pPixels->green + pPixels->red;

    // 6,2
    pPixels = &Pixels[(6*width_step)+(((height_step*2)-1)*width)];
    pixel_sum += pPixels->blue + pPixels->green + pPixels->red;

    // 1,3
    pPixels = &Pixels[(1*width_step)+(((height_step*3)-1)*width)];
    pixel_sum += pPixels->blue + pPixels->green + pPixels->red;

    // 3,3
    pPixels = &Pixels[(3*width_step)+(((height_step*3)-1)*width)];
    pixel_sum += pPixels->blue + pPixels->green + pPixels->red;

    // 5,3
    pPixels = &Pixels[(5*width_step)+(((height_step*3)-1)*width)];
    pixel_sum += pPixels->blue + pPixels->green + pPixels->red;

    // 7,3
    pPixels = &Pixels[(7*width_step)+(((height_step*3)-1)*width)];
    pixel_sum += pPixels->blue + pPixels->green + pPixels->red;

    // 2,4
    pPixels = &Pixels[(2*width_step)+(((height_step*4)-1)*width)];
    pixel_sum += pPixels->blue + pPixels->green + pPixels->red;

    // 4,4
    pPixels = &Pixels[(4*width_step)+(((height_step*4)-1)*width)];
    pixel_sum += pPixels->blue + pPixels->green + pPixels->red;

    // 6,4
    pPixels = &Pixels[(6*width_step)+(((height_step*4)-1)*width)];
    pixel_sum += pPixels->blue + pPixels->green + pPixels->red;

    // 1,5
    pPixels = &Pixels[(1*width_step)+(((height_step*5)-1)*width)];
    pixel_sum += pPixels->blue + pPixels->green + pPixels->red;

    // 3,5
    pPixels = &Pixels[(3*width_step)+(((height_step*5)-1)*width)];
    pixel_sum += pPixels->blue + pPixels->green + pPixels->red;

    // 5,5
    pPixels = &Pixels[(5*width_step)+(((height_step*5)-1)*width)];
    pixel_sum += pPixels->blue + pPixels->green + pPixels->red;

    // 7,5
    pPixels = &Pixels[(7*width_step)+(((height_step*5)-1)*width)];
    pixel_sum += pPixels->blue + pPixels->green + pPixels->red;

    // 2,6
    pPixels = &Pixels[(2*width_step)+(((height_step*6)-1)*width)];
    pixel_sum += pPixels->blue + pPixels->green + pPixels->red;

    // 4,6
    pPixels = &Pixels[(4*width_step)+(((height_step*6)-1)*width)];
    pixel_sum += pPixels->blue + pPixels->green + pPixels->red;

    // 6,6
    pPixels = &Pixels[(6*width_step)+(((height_step*6)-1)*width)];
    pixel_sum += pPixels->blue + pPixels->green + pPixels->red;

    // 3,7
    pPixels = &Pixels[(3*width_step)+(((height_step*7)-1)*width)];
    pixel_sum += pPixels->blue + pPixels->green + pPixels->red;

    // 5,7
    pPixels = &Pixels[(5*width_step)+(((height_step*7)-1)*width)];
    pixel_sum += pPixels->blue + pPixels->green + pPixels->red;

//   Case  0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19
//   Balls 1   2   3   2   9  15   4   4   3   6   4   6   3   1   9   9  13  12  16   5

         if (pixel_sum == 10664)         balls =  1;         // case  0
    else if (pixel_sum == 11354)         balls =  2;         // case  1
    else if (pixel_sum == 12965)         balls =  3;         // case  2
    else if (pixel_sum ==  9331)         balls =  2;         // case  3
    else if (pixel_sum ==  8576)         balls =  9;         // case  4
    else if (pixel_sum == 11383)         balls = 15;         // case  5
    else if (pixel_sum == 13229)         balls =  4;         // case  6
    else if (pixel_sum == 11994)         balls =  4;         // case  7
    else if (pixel_sum ==  7118)         balls =  3;         // case  8
    else if (pixel_sum == 10723)         balls =  6;         // case  9
    else if (pixel_sum == 10558)         balls =  4;         // case 10
    else if (pixel_sum ==  7586)         balls =  6;         // case 11
    else if (pixel_sum ==  9828)         balls =  3;         // case 12
    else if (pixel_sum ==  7862)         balls =  1;         // case 13
    else if (pixel_sum == 11073)         balls =  9;         // case 14
    else if (pixel_sum ==  3478)         balls =  9;         // case 15
    else if (pixel_sum ==  5139)         balls = 13;         // case 16
    else if (pixel_sum ==  2988)         balls = 12;         // case 17
    else if (pixel_sum == 11410)         balls = 16;         // case 18
    else                                 balls =  5;         // case 19

}


int main() 
{
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    

    get_input_data();

    if (pixel_count >= MaxPixels)
        printf("Pixel Max Reached\n");
    else
        process_data();

    printf("%d", balls);

    return 0;
}